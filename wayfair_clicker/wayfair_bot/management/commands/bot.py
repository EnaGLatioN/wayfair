import subprocess
import os
import signal
import sys
import django
from django.core.management.base import BaseCommand
from logger import setup_logger
import telebot
from telebot.types import ReplyKeyboardRemove
from decouple import config

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wayfair_clicker.wayfair_clicker.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

django.setup()

from wayfair_bot.models import Token, Process, User


class Command(BaseCommand):
    help = "Telegram bot for Wayfair clicker"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bot = telebot.TeleBot(config("TELE_TOKEN", cast=str))
        self.user_states = {}
        self.setup_handlers()
        self.logger = setup_logger()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
            user_id = message.from_user.id
            self.logger.info(f"USER ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            User.objects.get_or_create(
                telegram_id=user_id
            )
            welcome_text = """
                ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wayfair Bot!
                
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /token - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        /run - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–æ–∫–µ–Ω–æ–º
        /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        /status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        /help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        /new - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['help'])
        def show_help(message):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
            help_text = """
                üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
                
        /token - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω
        /run <id_—Ç–æ–∫–µ–Ω–∞> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        /list_tokens - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        /new - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            """
            self.bot.reply_to(message, help_text)

        @self.bot.message_handler(commands=['token'])
        def request_token(message):
            """–ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            chat_id = message.chat.id
            user_id = message.from_user.id
            try:
                user = User.objects.get(
                    telegram_id=user_id
                )
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–∏ /start: {e}")
                return
            if user.tg_token:
                self.bot.reply_to(message, f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–∏—à–∏  /list_tokens")
            else:
                self.user_states[chat_id] = "waiting_for_token"

                self.bot.send_message(
                    chat_id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:",
                    reply_markup=ReplyKeyboardRemove()
                )

        @self.bot.message_handler(commands=['list_tokens'])
        def list_tokens(message):
            """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"""
            try:
                tokens = Token.objects.filter()
                if tokens:
                    token_list = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n\n"
                    for token in tokens:
                        token_list += f"ID: {token.id} - {token.token[:10]}...\n"
                    self.bot.reply_to(message, token_list)
                else:
                    self.bot.reply_to(message, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /token —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

        @self.bot.message_handler(commands=['new'])
        def show_status(message):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
            user_id = message.from_user.id
            command_parts = message.text.split("=")
            if len(command_parts) < 2:
                self.bot.reply_to(message,
                                  "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new = —Ç–æ–∫–µ–Ω\n")
                return
            try:
                user = User.objects.get(
                    telegram_id=user_id
                )
            except User.DoesNotExist:
                self.bot.reply_to(message, "‚ùå User —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                return
            token = Token(
                token=command_parts[1].strip()
            )
            old_t = user.tg_token
            old_t.delete()
            user.tg_token = token
            user.save()
            self.bot.reply_to(message, "‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


        @self.bot.message_handler(commands=['run'])
        def run_process(message):
            """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º"""
            chat_id = message.chat.id
            user_id = message.from_user.id

            command_parts = message.text.split("=")

            if len(command_parts) < 2:
                self.bot.reply_to(message,
                                  "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run = id_—Ç–æ–∫–µ–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_tokens —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
                return

            try:
                token_id = command_parts[1].strip()
                token = Token.objects.get(id=token_id)
                self.start_clicker_process(token, chat_id, user_id)

            except Token.DoesNotExist:
                self.bot.reply_to(message, "‚ùå –¢–æ–∫–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

        @self.bot.message_handler(commands=['stop'])
        def stop_process(message):
            """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
            user_id = message.from_user.id
            try:
                user = User.objects.get(
                    telegram_id=user_id
                )
            except User.DoesNotExist:
                self.bot.reply_to(message, "‚ùå User —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                return
            process = user.process
            if process.status:
                try:
                    os.kill(process.pid, signal.SIGTERM)
                    process.status = False
                    process.save()
                    self.bot.reply_to(message, "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                except Exception as e:
                    process.status = False
                    process.save()
                    self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        @self.bot.message_handler(commands=['status'])
        def show_status(message):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
            user_id = message.from_user.id
            try:
                user = User.objects.get(
                    telegram_id=user_id
                )
            except User.DoesNotExist:
                self.bot.reply_to(message, "‚ùå User —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                return
            process = user.process
            if process.status:
                status = "üü¢ –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω" if process.status else "üî¥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω"
                self.bot.reply_to(message, f"üìä –°—Ç–∞—Ç—É—Å: {status}\nPID: {process.pid}")
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

        @self.bot.message_handler(func=lambda message: self.user_states.get(message.chat.id) == "waiting_for_token")
        def handle_token_input(message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
            chat_id = message.chat.id
            user_id = message.from_user.id
            token_value = message.text.strip()

            if token_value:
                # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                self.user_states.pop(chat_id, None)

                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É
                    token = Token.objects.create(token=token_value)
                    try:
                        user = User.objects.get(
                            telegram_id=user_id
                        )
                    except Exception as e:
                        user = None
                        self.bot.send_message(
                            chat_id,
                            "–í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ /start",
                            reply_markup=ReplyKeyboardRemove()
                        )
                    if user:
                        user.tg_token = token
                        user.save()

                    self.bot.send_message(
                        chat_id,
                        f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nID: {token.id}\n–¢–æ–∫–µ–Ω: {token_value[:10]}...",
                        reply_markup=ReplyKeyboardRemove()
                    )

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    self.bot.send_message(
                        chat_id,
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n/list_tokens - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã\n/run = id - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å \n/new = –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω"
                    )

                except Exception as e:
                    self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            else:
                self.bot.reply_to(message, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –µ—â–µ —Ä–∞–∑:")

    def start_clicker_process(self, token, chat_id, user_id):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ clicker"""
        try:
            user = User.objects.get(
                telegram_id=user_id
            )
            with open("process.log", "a") as log_file:
                active_process = subprocess.Popen(
                    [
                        "poetry", "run", "python", "clicker.py",
                        "--token", token.token,
                        "--chat_id", str(chat_id),
                    ],
                    stdout=log_file,
                    stderr=log_file,
                    text=True,
                    bufsize=1
                )
                process = Process.objects.create(
                    pid=active_process.pid,
                )
                user.process = process
                user.save()
                self.logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω. PID: {active_process.pid}")

                self.bot.send_message(
                    chat_id,
                    f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!\n–¢–æ–∫–µ–Ω ID: {token.id}\nPID: {active_process.pid}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        self.stdout.write("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.start_bot()

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞"""
        while True:
            try:
                self.bot.polling(none_stop=True)
            except Exception as e:
                self.stderr.write(f"–û—à–∏–±–∫–∞: {e}")
                continue